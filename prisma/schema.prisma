// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  profileUrl  String?
  password    String
  roleId      String
  role        Role          @relation(fields: [roleId], references: [id])
  Student     Student[]
  Teacher     Teacher[]
  Coordinator Coordinator[]

  @@map("user")
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  level       Int     @default(1)
  User        User[]

  @@map("role")
}

model School {
  id             String   @id @default(uuid())
  name           String
  projectId      String
  visualIdentity String?
  createdAt      DateTime @default(now())
  addressId      String   @unique

  Address          Address            @relation(fields: [addressId], references: [id], onDelete: Cascade)
  project          Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Coordinator      Coordinator[]
  Teacher          Teacher[]
  Student          Student[]
  Classroom        Classroom[]
  PegagogicalVisit PegagogicalVisit[]

  @@map("school")
}

model Project {
  id             String   @id @default(uuid())
  name           String
  visualIdentity String
  about          String
  createdAt      DateTime @default(now())

  Schools School[]

  @@map("project")
}

model Student {
  id        String   @id @default(uuid())
  birtday   DateTime
  createdAt DateTime @default(now())
  userId    String
  schoolId  String
  classId   String
  status    Boolean  @default(true)

  user       User         @relation(fields: [userId], references: [id])
  school     School       @relation(fields: [schoolId], references: [id])
  Classroom  Classroom    @relation(fields: [classId], references: [id])
  Attendance Attendance[]

  @@map("student")
}

model Teacher {
  id        String   @id @default(uuid())
  schoolId  String
  userId    String
  telephone String
  validated Boolean  @default(false)
  createdAt DateTime @default(now())
  status    Boolean  @default(true)

  coordinatorId String

  school      School      @relation(fields: [schoolId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  coordinator Coordinator @relation(fields: [coordinatorId], references: [id])
  Classroom   Classroom[]

  @@map("teacher")
}

model Coordinator {
  id        String   @id @default(uuid())
  userId    String
  telephone String
  createdAt DateTime @default(now())
  schoolId  String

  user             User               @relation(fields: [userId], references: [id])
  school           School             @relation(fields: [schoolId], references: [id])
  Teacher          Teacher[]
  PegagogicalVisit PegagogicalVisit[]

  @@map("coordinator")
}

model Classroom {
  id        String   @id @default(uuid())
  name      String
  session   String
  createdAt DateTime @default(now())
  gradeId   String
  schoolId  String
  teacherId String

  school           School             @relation(fields: [schoolId], references: [id])
  teacher          Teacher            @relation(fields: [teacherId], references: [id])
  grade            Grade              @relation(fields: [gradeId], references: [id])
  students         Student[]
  Attendance       Attendance[]
  PegagogicalVisit PegagogicalVisit[]

  @@map("classroom")
}

model Grade {
  id        String      @id @default(uuid())
  name      String
  year      String
  Classroom Classroom[]

  @@map("grade")
}

model Address {
  id      String @id @default(uuid())
  street  String
  city    String
  state   String
  zipCode String

  School School?

  @@map("address")
}

model Attendance {
  id        String   @id @default(uuid())
  date      DateTime
  isPresent Boolean  @default(false)
  studentId String
  classId   String

  student   Student   @relation(fields: [studentId], references: [id])
  Classroom Classroom @relation(fields: [classId], references: [id])

  @@map("attendance")
}

model PegagogicalVisit {
  id           String   @id @default(uuid())
  date         DateTime @default(now())
  frequency    Int
  observations String
  questions    Json

  schoolId      String
  coordinatorId String
  classId       String

  Classroom  Classroom   @relation(fields: [classId], references: [id])
  Coodinator Coordinator @relation(fields: [coordinatorId], references: [id])
  School     School      @relation(fields: [schoolId], references: [id])

  @@map("pegagogicalVisit")
}

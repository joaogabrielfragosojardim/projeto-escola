// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  profileUrl  String?
  password    String
  roleId      String
  role        Role          @relation(fields: [roleId], references: [id])
  Student     Student[]
  Teacher     Teacher[]
  Coordinator Coordinator[]
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  level       Int     @default(1)
  User        User[]
}

model School {
  id        String   @id @default(uuid())
  name      String
  projectId String
  createdAt DateTime @default(now())
  addressId String   @unique

  Address     Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Coordinator Coordinator[]
  Teacher     Teacher[]
  Student     Student[]
  Class       Class[]
}

model Project {
  id             String   @id @default(uuid())
  name           String
  visualIdentity String
  about          String
  createdAt      DateTime @default(now())

  Schools School[]
}

model Student {
  id        String   @id @default(uuid())
  birtday   DateTime
  createdAt DateTime @default(now())
  userId    String
  schoolId  String
  classId   String
  status    Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  Class     Class    @relation(fields: [classId], references: [id])
}

model Teacher {
  id            String   @id @default(uuid())
  schoolId      String
  userId        String
  telephone     String
  validated     Boolean  @default(false)
  createdAt     DateTime @default(now())
  coordinatorId String

  school      School      @relation(fields: [schoolId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  coordinator Coordinator @relation(fields: [coordinatorId], references: [id])
  Class       Class[]
}

model Coordinator {
  id        String   @id @default(uuid())
  userId    String
  telephone String
  createdAt DateTime @default(now())
  schoolId  String

  user    User      @relation(fields: [userId], references: [id])
  school  School    @relation(fields: [schoolId], references: [id])
  Teacher Teacher[]
}

model Class {
  id        String @id @default(uuid())
  name      String
  session   String
  gradeId   String
  schoolId  String
  teacherId String

  school   School    @relation(fields: [schoolId], references: [id])
  teacher  Teacher   @relation(fields: [teacherId], references: [id])
  grade    Grade     @relation(fields: [gradeId], references: [id])
  students Student[]
}

model Grade {
  id    String  @id @default(uuid())
  name  String
  Class Class[]
}

model Address {
  id      String @id @default(uuid())
  street  String
  city    String
  state   String
  zipCode String

  School School?
}

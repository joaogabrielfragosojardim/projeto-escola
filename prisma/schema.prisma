datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
}

model User {
  id                  String          @id @default(uuid())
  name                String
  email               String          @unique
  visualIdentity      String?
  password            String
  roleId              String
  isFirstAccess       Boolean         @default(true)
  passwordToken       String?         @unique
  passwordExpiresDate DateTime?
  Administrator       Administrator[] @relation(name: "AdministratorToUser")
  Coordinator         Coordinator[]   @relation(name: "CoordinatorToUser")
  Student             Student[]       @relation(name: "StudentToUser")
  Teacher             Teacher[]       @relation(name: "TeacherToUser")
  role                Role            @relation(name: "RoleToUser", fields: [roleId], references: [id])

  @@map("user")
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  level       Int     @default(1)
  User        User[]  @relation(name: "RoleToUser")

  @@map("role")
}

model School {
  id               String             @id @default(uuid())
  name             String
  projectId        String
  visualIdentity   String?
  createdAt        DateTime           @default(now())
  addressId        String             @unique
  status           Boolean            @default(true)
  Classroom        Classroom[]        @relation(name: "ClassroomToSchool")
  Coordinator      Coordinator[]      @relation(name: "CoordinatorToSchool")
  PedagogicalVisit PedagogicalVisit[] @relation(name: "PedagogicalVisitToSchool")
  Address          Address            @relation(name: "AddressToSchool", fields: [addressId], references: [id])
  project          Project            @relation(name: "ProjectToSchool", fields: [projectId], references: [id])
  Student          Student[]          @relation(name: "SchoolToStudent")
  Teacher          Teacher[]          @relation(name: "SchoolToTeacher")

  @@map("school")
}

model Project {
  id             String   @id @default(uuid())
  name           String
  visualIdentity String
  about          String
  status         Boolean  @default(true)
  createdAt      DateTime @default(now())
  Schools        School[] @relation(name: "ProjectToSchool")

  @@map("project")
}

model Student {
  id                 String               @id @default(uuid())
  birtday            DateTime
  createdAt          DateTime             @default(now())
  userId             String
  schoolId           String
  classId            String
  status             Boolean              @default(true)
  registration       String               @unique
  Attendance         Attendance[]         @relation(name: "AttendanceToStudent")
  LearningMonitoring LearningMonitoring[] @relation(name: "LearningMonitoringToStudent")
  Classroom          Classroom            @relation(name: "ClassroomToStudent", fields: [classId], references: [id])
  school             School               @relation(name: "SchoolToStudent", fields: [schoolId], references: [id])
  user               User                 @relation(name: "StudentToUser", fields: [userId], references: [id])

  @@map("student")
}

model Teacher {
  id                 String               @id @default(uuid())
  telephone          String               @unique
  createdAt          DateTime             @default(now())
  status             Boolean              @default(true)
  schoolId           String
  userId             String
  coordinatorId      String
  LearningMonitoring LearningMonitoring[] @relation(name: "LearningMonitoringToTeacher")
  coordinator        Coordinator          @relation(name: "CoordinatorToTeacher", fields: [coordinatorId], references: [id])
  school             School               @relation(name: "SchoolToTeacher", fields: [schoolId], references: [id])
  user               User                 @relation(name: "TeacherToUser", fields: [userId], references: [id])
  Classroom          Classroom[]          @relation(name: "ClassroomToTeacher")
  PedagogicalVisit   PedagogicalVisit[]   @relation(name: "PedagogicalVisitToTeacher")
  attendance         Attendance[]          @relation(name: "TeacherToAttendance")

  @@map("teacher")
}

model Coordinator {
  id               String             @id @default(uuid())
  userId           String
  telephone        String             @unique
  createdAt        DateTime           @default(now())
  schoolId         String
  status           Boolean            @default(true)
  school           School             @relation(name: "CoordinatorToSchool", fields: [schoolId], references: [id])
  user             User               @relation(name: "CoordinatorToUser", fields: [userId], references: [id])
  PedagogicalVisit PedagogicalVisit[] @relation(name: "CoordinatorToPedagogicalVisit")
  Teacher          Teacher[]          @relation(name: "CoordinatorToTeacher")

  @@map("coordinator")
}

model Classroom {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  year               String
  period             String
  schoolId           String
  Attendance         Attendance[]         @relation(name: "AttendanceToClassroom")
  school             School               @relation(name: "ClassroomToSchool", fields: [schoolId], references: [id])
  LearningMonitoring LearningMonitoring[] @relation(name: "ClassroomToLearningMonitoring")
  PedagogicalVisit   PedagogicalVisit[]   @relation(name: "ClassroomToPedagogicalVisit")
  students           Student[]            @relation(name: "ClassroomToStudent")
  teachers           Teacher[]            @relation(name: "ClassroomToTeacher")

  @@map("classroom")
}

model Address {
  id           String  @id @default(uuid())
  street       String
  city         String
  state        String
  zipCode      String
  neighborhood String
  houseNumber  String
  School       School? @relation(name: "AddressToSchool")

  @@map("address")
}

model Attendance {
  id        String    @id @default(uuid())
  date      DateTime
  isPresent Boolean   @default(false)
  studentId String
  classId   String
  teacherId String    
  Classroom Classroom @relation(name: "AttendanceToClassroom", fields: [classId], references: [id])
  student   Student   @relation(name: "AttendanceToStudent", fields: [studentId], references: [id])
  Teacher   Teacher   @relation(name: "TeacherToAttendance", fields: [teacherId], references: [id])

  @@map("attendance")
}

model PedagogicalVisit {
  id            String      @id @default(uuid())
  date          DateTime    @default(now())
  frequency     Int
  observations  String
  questions     Json
  schoolId      String
  coordinatorId String
  classId       String
  teacherId     String
  Classroom     Classroom   @relation(name: "ClassroomToPedagogicalVisit", fields: [classId], references: [id])
  Coordinator   Coordinator @relation(name: "CoordinatorToPedagogicalVisit", fields: [coordinatorId], references: [id])
  School        School      @relation(name: "PedagogicalVisitToSchool", fields: [schoolId], references: [id])
  Teacher       Teacher     @relation(name: "PedagogicalVisitToTeacher", fields: [teacherId], references: [id])

  @@map("pedagogicalVisit")
}

model Administrator {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(name: "AdministratorToUser", fields: [userId], references: [id])

  @@map("administrator")
}

model LearningMonitoring {
  id           String    @id @default(uuid())
  questions    Json
  writingLevel String
  createdAt    DateTime  @default(now())
  studentId    String
  classroomId  String
  teacherId    String
  classroom    Classroom @relation(name: "ClassroomToLearningMonitoring", fields: [classroomId], references: [id])
  student      Student   @relation(name: "LearningMonitoringToStudent", fields: [studentId], references: [id])
  teacher      Teacher   @relation(name: "LearningMonitoringToTeacher", fields: [teacherId], references: [id])

  @@map("learningMonitoring")
}

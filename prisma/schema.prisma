// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  name           String
  email          String  @unique
  visualIdentity String?
  password       String
  roleId         String
  isFirstAccess  Boolean

  passwordToken       String?   @unique
  passwordExpiresDate DateTime?

  role          Role            @relation(fields: [roleId], references: [id])
  Student       Student[]
  Teacher       Teacher[]
  Coordinator   Coordinator[]
  Administrator Administrator[]

  @@map("user")
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  level       Int     @default(1)
  User        User[]

  @@map("role")
}

model School {
  id             String   @id @default(uuid())
  name           String
  projectId      String
  visualIdentity String?
  createdAt      DateTime @default(now())
  addressId      String   @unique

  Address          Address            @relation(fields: [addressId], references: [id], onDelete: Cascade)
  project          Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Coordinator      Coordinator[]
  Teacher          Teacher[]
  Student          Student[]
  Classroom        Classroom[]
  PedagogicalVisit PedagogicalVisit[]

  @@map("school")
}

model Project {
  id             String   @id @default(uuid())
  name           String
  visualIdentity String
  about          String
  createdAt      DateTime @default(now())

  Schools School[]

  @@map("project")
}

model Student {
  id           String   @id @default(uuid())
  birtday      DateTime
  createdAt    DateTime @default(now())
  userId       String
  schoolId     String
  classId      String
  status       Boolean  @default(true)
  registration String   @unique

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  school             School               @relation(fields: [schoolId], references: [id])
  Classroom          Classroom            @relation(fields: [classId], references: [id])
  Attendance         Attendance[]
  LearningMonitoring LearningMonitoring[]

  @@map("student")
}

model Teacher {
  id        String   @id @default(uuid())
  telephone String   @unique
  createdAt DateTime @default(now())
  status    Boolean  @default(true)

  schoolId      String
  userId        String
  coordinatorId String

  school             School               @relation(fields: [schoolId], references: [id])
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  coordinator        Coordinator          @relation(fields: [coordinatorId], references: [id])
  Classroom          Classroom[]
  LearningMonitoring LearningMonitoring[]

  @@map("teacher")
}

model Coordinator {
  id        String   @id @default(uuid())
  userId    String
  telephone String   @unique
  createdAt DateTime @default(now())
  schoolId  String

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  school           School             @relation(fields: [schoolId], references: [id])
  Teacher          Teacher[]
  PedagogicalVisit PedagogicalVisit[]

  @@map("coordinator")
}

model Classroom {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  year      String
  period    String

  schoolId  String
  teacherId String?

  school             School               @relation(fields: [schoolId], references: [id])
  teacher            Teacher?             @relation(fields: [teacherId], references: [id])
  students           Student[]
  Attendance         Attendance[]
  PedagogicalVisit   PedagogicalVisit[]
  LearningMonitoring LearningMonitoring[]

  @@map("classroom")
}

model Address {
  id           String @id @default(uuid())
  street       String
  city         String
  state        String
  zipCode      String
  neighborhood String
  houseNumber  String

  School School?

  @@map("address")
}

model Attendance {
  id        String   @id @default(uuid())
  date      DateTime
  isPresent Boolean  @default(false)
  studentId String
  classId   String

  student   Student   @relation(fields: [studentId], references: [id])
  Classroom Classroom @relation(fields: [classId], references: [id])

  @@map("attendance")
}

model PedagogicalVisit {
  id           String   @id @default(uuid())
  date         DateTime @default(now())
  frequency    Int
  observations String
  questions    Json

  schoolId      String
  coordinatorId String
  classId       String

  Classroom   Classroom   @relation(fields: [classId], references: [id])
  Coordinator Coordinator @relation(fields: [coordinatorId], references: [id])
  School      School      @relation(fields: [schoolId], references: [id])

  @@map("pedagogicalVisit")
}

model Administrator {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("administrator")
}

model LearningMonitoring {
  id           String   @id @default(uuid())
  questions    Json
  writingLevel String
  createdAt    DateTime @default(now())
  studentId    String
  classroomId  String
  teacherId    String

  student   Student   @relation(fields: [studentId], references: [id])
  classroom Classroom @relation(fields: [classroomId], references: [id])
  teacher   Teacher   @relation(fields: [teacherId], references: [id])

  @@map("learningMonitoring")
}
